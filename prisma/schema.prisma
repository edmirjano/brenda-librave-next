// This is your Prisma schema file for BrÃ«nda Librave
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Note: For production deployment on Netlify, this will be automatically 
// configured to use PostgreSQL via Neon. See NETLIFY_DEPLOYMENT.md for setup.

// Authentication Models (NextAuth.js compatible)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Management
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String?   // nullable for social auth
  name            String
  role            Role      @default(USER)
  language        Language  @default(SQ)
  currency        Currency  @default(ALL)
  newsletter      Boolean   @default(false)
  emailVerified   DateTime?
  image           String?
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Language {
  SQ
  EN
}

enum Currency {
  ALL  // Albanian Lek
  EUR  // Euro
}

// Settings for the application
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  updatedAt DateTime @updatedAt
}

// Currency Exchange Rates
model ExchangeRate {
  id           String   @id @default(cuid())
  fromCurrency Currency
  toCurrency   Currency
  rate         Float
  isActive     Boolean  @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([fromCurrency, toCurrency])
  @@index([isActive])
}

// Book Catalog Models
model Book {
  id              String    @id @default(cuid())
  title           String
  author          String
  description     String    @db.Text
  isbn            String?   @unique
  categoryId      String
  priceALL        Decimal?  @db.Decimal(10, 2) // Albanian Lek
  priceEUR        Decimal?  @db.Decimal(10, 2) // Euro
  digitalPriceALL Decimal?  @db.Decimal(10, 2)
  digitalPriceEUR Decimal?  @db.Decimal(10, 2)
  inventory       Int       @default(0)
  hasDigital      Boolean   @default(false)
  coverImage      String?
  publishedDate   DateTime?
  language        Language  @default(SQ)
  featured        Boolean   @default(false)
  active          Boolean   @default(true)
  slug            String    @unique
  
  category        Category  @relation(fields: [categoryId], references: [id])
  tags            BookTag[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([active])
  @@index([featured])
  @@index([categoryId])
  @@index([slug])
}

model Category {
  id          String  @id @default(cuid())
  name        String
  nameEn      String?
  slug        String  @unique
  description String?
  active      Boolean @default(true)
  
  books       Book[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([active])
  @@index([slug])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  nameEn      String?
  slug        String    @unique
  color       String?   // hex color for UI
  
  books       BookTag[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([slug])
}

model BookTag {
  bookId    String
  tagId     String
  
  book      Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  tag       Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([bookId, tagId])
  @@index([bookId])
  @@index([tagId])
} 